{{template "header" .}}

<section class="jumbotron text-center">
	<div class="container">
		<h1>The DynamicSystems&trade; CoolCPU is the future of computing.</h1>
		<p class="lead">Advanced features like "addition" and "number comparisons" make anything else seem...<em>un</em>cool.</p>
		{{ if eq .Version 2 }}
		<div class="alert alert-warning" role="alert">
			<h4 class="alert-heading">New in version 2</h4>
			<ul>
				<li>The Timing section has been added, describing how long each instruction takes to run.</li>
				<li>The brand-new Dynamic<em>Blast!</em> Engine lets you quickly read data from an external hard drive.</li>
			</ul>
		</div>
		{{ end }}
		<img src="assets/cool.png" />
	</div>
</section>

<section>
	<div class="container">
		<h3>Try it now</h3>
		<form action="run" method="POST">
			<div class="form-group">
				<label for="code">Write your code here:</label>
				<textarea name="code" class="form-control"></textarea>
			</div>

			<button type="submit" class="btn btn-primary">Run</button>
		</form>
	</div>
</section>

<section>
	<div class="container">
		<h3>Description</h3>
		<p>
			The CoolCPU is a brand new CPU architecture, inspired by processors like the Zilog Z80 and the MOS Technology 6502.
		</p>
		<p>
			The CoolCPU can access up to 256 bytes of external memory.
			The first 128 bytes (<code>0x00</code> to <code>0x7F</code>) are <em>read-only memory</em>, or ROM, and it's what you set in the "Try it now" box above.
			Then, the memory from <code>0x80</code> to <code>0xF0</code> is <em>random-access memory</em>, or RAM.
			Your code can store and load values from RAM however it wants.
		</p>
		<p>
			Finally, <code>0xF1</code> is the <em>output register</em>.
			Anything you write to the output register will be printed to the screen.
			{{ if eq .Version 2 }}
			In addition, consult the Dynamic<em>Blast!</em> Engine section to learn about the remaining registers.
			{{ end }}
		</p>
	</div>
</section>

<section>
	<div class="container">
		<h3>Registers</h3>
		<p>
			The CoolCPU has four main registers.
			The first is the Program Counter, or <em>PC</em>, which keeps track of the next instruction to run.
			The PC always starts at 0, and the CPU keeps track of it for you.
		</p>
		<p>
			The remaining three are registers <em>A</em>, <em>B</em>, and <em>C</em>, which are general-purpose 8-bit registers.
			You can use them any way you want; however, note that some instructions only work on register A.
		</p>
	</div>
</section>

{{ if eq .Version 2 }}
<section>
	<div class="container">
		<h3>Timing</h3>
		<p>
			Different CoolCPU instructions take different amounts of time to run.
			We measure each instruction in <em>clock cycles</em>.
			The Instructions table below specifies the number of cycles each instruction requires.
		</p>
	</div>
</section>
{{ end }}

{{ if eq .Version 2 }}
<section>
	<div class="container">
		<h3>Dynamic<em>Blast!</em> Engine</h3>
		<p>
			The Dynamic<em>Blast!</em> Engine lets you read data from an external hard drive connected to the CoolCPU.
			It works by copying data from the external hard drive to RAM.
			You must set the parameters for the copy (for example, the source and destination) and then start the Dynamic<em>Blast!</em> Engine.
		</p>
		<p>
			The hard drive is broken up into 256 different <em>sectors</em>, numbered from 0 to 255.
			Each sector is 32 bytes long.
			The Dynamic<em>Blast!</em> Engine works at a sector level.
			It will always copy exactly one sector&mdash;no more and no less.
		</p>
		<p>
			To perform a copy, do the following:
			<ul>
				<li>Set the <code>DBEDST</code> register (<code>0xF2</code>) to the <em>destination</em> address of your copy. This should be somewhere in RAM.</li>
				<li>Set the <code>DBESRC</code> register (<code>0xF3</code>) to the <em>sector</em> you wish to copy from.</li>
				<li>Set the <code>DBEGO</code> register (<code>0xF4</code>) to <code>0x01</code>. This starts the copy.</li>
				<li>
					Once the copy has started, you must periodically <em>poke</em> the Dynamic<em>Blast!</em> Engine.
					Failure to properly poke the Dynamic<em>Blast!</em> Engine will destroy the hard drive.
				</li>
			</ul>
		</p>

		<h4>Poking the Dynamic<em>Blast!</em> Engine</h4>
		<p>
			As mentioned before, poking the Dynamic<em>Blast!</em> Engine is crucial.
			To poke the Dynamic<em>Blast!</em> Engine, write the <em>poke index</em> to <code>DBEPKE</code> (<code>0xF5</code>).
			The <em>poke index</em> starts at 5 and decreases by one for each poke.
			So, for the first poke you would write a 5, then the next poke a 4, the next poke a 3, and so on.
		</p>
		<p>
			The timing of the first poke does not matter.
			However, for every poke after the first one, you must poke <em>precisely</em> 36 cycles after the previous poke&mdash;no more, no less.
			To be even more precise: there should be exactly 36 cycles from right before the store instruction of the first poke up to right before the store instruction of the next poke.
			Incorrect poke timing will destroy the attached hard drive.
		</p>
		<p>
			You will need to poke the hard drive a total of 5 times. (so the last poke index you write to <code>DBEPKE</code> will be a 1)
			After the fifth poke, the data will be available in memory, and the copy will be complete.
		</p>
	</div>
</section>
{{ end }}

<section>
	<div class="container">
		<h3>Instruction set</h3>
		<table class="isa">
			<thead>
				<tr>
					<th class="isaHeaderName">Name</th>
					<th class="isaHeaderHex">Hexadecimal</th>
					{{ if eq .Version 2 }}<th class="isaHeaderHex">Cycles</th>{{ end }}
					<th class="isaHeaderDesc">Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>NOP</td>
					<td>00</td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">No Operation</div>
						Does nothing.
					</td>
				</tr>

				<tr>
					<td>LDA <em>nn</em></td>
					<td>01 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">Load Register A</div>
						Reads the data at address <em>nn</em> and stores it in register A.
					</td>
				</tr>

				<tr>
					<td>LDB <em>nn</em></td>
					<td>02 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">Load Register B</div>
						Reads the data at address <em>nn</em> and stores it in register B.
					</td>
				</tr>

				<tr>
					<td>LDC <em>nn</em></td>
					<td>03 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">Load Register C</div>
						Reads the data at address <em>nn</em> and stores it in register C.
					</td>
				</tr>

				<tr>
					<td>LDA [A]</td>
					<td>04</td>
					{{ if eq .Version 2 }}<td>2</td>{{ end }}
					<td>
						<div class="isaInstructionName">Load Register A</div>
						Reads the data located at the address in register A and stores it in register A.
					</td>
				</tr>

				<tr>
					<td>LDB [A]</td>
					<td>05</td>
					{{ if eq .Version 2 }}<td>2</td>{{ end }}
					<td>
						<div class="isaInstructionName">Load Register B</div>
						Reads the data located at the address in register A and stores it in register B.
					</td>
				</tr>

				<tr>
					<td>LDC [A]</td>
					<td>06</td>
					{{ if eq .Version 2 }}<td>2</td>{{ end }}
					<td>
						<div class="isaInstructionName">Load Register C</div>
						Reads the data located at the address in register A and stores it in register C.
					</td>
				</tr>

				<tr>
					<td>STA <em>nn</em></td>
					<td>11 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">Store Register A</div>
						Stores the value of register A into address <em>nn</em>.
					</td>
				</tr>

				<tr>
					<td>STB <em>nn</em></td>
					<td>12 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">Store Register B</div>
						Stores the value of register B into address <em>nn</em>.
					</td>
				</tr>

				<tr>
					<td>STC <em>nn</em></td>
					<td>13 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">Store Register C</div>
						Stores the value of register C into address <em>nn</em>.
					</td>
				</tr>

				<tr>
					<td>STA [A]</td>
					<td>14</td>
					{{ if eq .Version 2 }}<td>2</td>{{ end }}
					<td>
						<div class="isaInstructionName">Store Register A</div>
						Stores the value of register A into the memory address in register A.
					</td>
				</tr>

				<tr>
					<td>STB [A]</td>
					<td>15</td>
					{{ if eq .Version 2 }}<td>2</td>{{ end }}
					<td>
						<div class="isaInstructionName">Store Register B</div>
						Stores the value of register B into the memory address in register A.
					</td>
				</tr>

				<tr>
					<td>STC [A]</td>
					<td>16</td>
					{{ if eq .Version 2 }}<td>2</td>{{ end }}
					<td>
						<div class="isaInstructionName">Store Register C</div>
						Stores the value of register C into the memory address in register A.
					</td>
				</tr>

				<tr>
					<td>INC</td>
					<td>20</td>
					{{ if eq .Version 2 }}<td>2</td>{{ end }}
					<td>
						<div class="isaInstructionName">Increment</div>
						Add 1 to register A.
					</td>
				</tr>

				<tr>
					<td>DEC</td>
					<td>21</td>
					{{ if eq .Version 2 }}<td>2</td>{{ end }}
					<td>
						<div class="isaInstructionName">Decrement</div>
						Subtract 1 from register A.
					</td>
				</tr>

				<tr>
					<td>CON <em>nn</em></td>
					<td>22 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">Constant</div>
						Sets register A to the literal value <em>nn</em>.
					</td>
				</tr>

				<tr>
					<td>JP <em>nn</em></td>
					<td>30 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>2</td>{{ end }}
					<td>
						<div class="isaInstructionName">Jump</div>
						Moves the Program Counter to address <em>nn</em>.
					</td>
				</tr>

				<tr>
					<td>JZ <em>nn</em></td>
					<td>31 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>3</td>{{ end }}
					<td>
						<div class="isaInstructionName">Jump If Zero</div>
						If register A is 0, moves the Program Counter to address <em>nn</em>. Otherwise does nothing.
					</td>
				</tr>

				<tr>
					<td>JNZ <em>nn</em></td>
					<td>32 <em>nn</em></td>
					{{ if eq .Version 2 }}<td>3</td>{{ end }}
					<td>
						<div class="isaInstructionName">Jump If Not Zero</div>
						If register A is not 0, moves the Program Counter to address <em>nn</em>. Otherwise does nothing.
					</td>
				</tr>

				<tr>
					<td>SWB</td>
					<td>40</td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">Swap Register B</div>
						Swaps the contents of registers A and B.
					</td>
				</tr>

				<tr>
					<td>SWC</td>
					<td>41</td>
					{{ if eq .Version 2 }}<td>1</td>{{ end }}
					<td>
						<div class="isaInstructionName">Swap Register C</div>
						Swaps the contents of registers A and C.
					</td>
				</tr>

				<tr>
					<td>HCF</td>
					<td>FF</td>
					{{ if eq .Version 2 }}<td>N/A</td>{{ end }}
					<td>
						<div class="isaInstructionName">Halt And Catch Fire</div>
						Lights the CPU on fire, which terminates your program.
						Due to technological restrictions, the CoolCPU simulator cannot accurately simulate this instruction, and will only halt the CPU.
					</td>
				</tr>
			</tbody>
		</table>
	</div>
</section>

<section>
	<div class="container">
		<h3>Sample program 1</h3>
		<p>Let's say you want to print out "cool!". This means you'd have to write each character in that string to the <em>output register</em>, which we know from the "Description" section above is <code>0xF1</code>.</p>
		<p>By looking up the characters in an <a href="https://www.asciitable.com/">ASCII table</a>, you can figure out what values to write. The instructions to do this might look something like:</p>
		<pre>; print out c
CON 0x63
STA 0xF1

; print out o
CON 0x6F
STA 0xF1

; print out o
CON 0x6F
STA 0xF1

; print out l
CON 0x6C
STA 0xF1

; print out !
CON 0x21
STA 0xF1

; stop CPU
HCF</pre>
		<p>
			We use the <code>CON</code> instruction to load a value into register A, and then use the <code>STA</code> instruction to store that value into the output register.
			Finally, we use <code>HCF</code> to set the CPU on fire, which ends the program.
		</p>
		<p>
			Now, using the table above, we can determine the hexadecimal values that correspond to these instructions:
		</p>
		<pre>22 63
11 F1
22 6F
11 F1
22 6F
11 F1
22 6C
11 F1
22 21
11 F1
FF</pre>
		<p>(they're spaced out on multiple lines for clarity&mdash;the spacing has no effect on their location)</p>
		<p>And that's our program! You can try it in the simulator above.</p>
	</div>
</section>

<section>
	<div class="container">
		<h3>Sample program 2</h3>
		<p>Let's say you now want to repeat the earlier code five times. You could just write the whole thing out over and over; however, it's better to do this in a loop. That might look something like this:</p>
		<pre>	CON 5
loop:
	SWB

	; print out c
	CON 0x63
	STA 0xF1

	; print out o
	CON 0x6F
	STA 0xF1

	; print out o
	CON 0x6F
	STA 0xF1

	; print out l
	CON 0x6C
	STA 0xF1

	; print out !
	CON 0x21
	STA 0xF1

	SWB

	DEC
	JNZ loop

	; stop CPU
	HCF</pre>
		<p>
			The main thing to notice here is that we're using the A register to track how many iterations are left in the loop.
			At the beginning of the program, the <code>CON 5</code> sets it to 5.
			Then, at the end of each loop iteration, the <code>DEC</code> instruction subtracts 1, and the <code>JNZ</code> continues the loop&mdash;unless A is 0, in which case <code>HCF</code> is run.
		</p>
		<p>
			However, you might have noticed an issue with this: we're using the A register for both the loop count and the character values!
			That's what the <code>SWB</code> instruction is for: it swaps registers A and B.
			We swap at the start of the loop to save the loop count, and then do a swap at the end to restore the count so that we can check it.
			Since most operations occur on register A, you'll find the swap instructions to be very helpful.
		</p>
		<p>
			Like before, we can use the instruction table to find the hexadecimal representation of these instructions:
		</p>
		<pre>22 05
40
22 63
11 F1
22 6F
11 F1
22 6F
11 F1
22 6C
11 F1
22 21
11 F1
40
21
32 02
FF</pre>
		<p>
			Notice how we had to calculate where the <code>loop</code> label is in the code.
			Based on the size of the instruction before it, and knowing that the first byte is address <code>0x0</code>, we can determine that <code>loop</code> is <code>0x02</code>.
			So, <code>JNZ loop</code> becomes <code>JNZ 0x02</code>, which becomes <code>32 02</code>.
		</p>
	</div>
</section>

{{template "footer" .}}